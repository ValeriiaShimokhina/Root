#include <iostream>
#include <TMath.h>
#include <TF1.h>
#include <math.h>
using namespace std;

// Метры, эВ, масса через c^2 в эв

double psi(double *x, double *par){
    return pow(2/TMath::Pi(),0.25)*1/sqrt(par[0])*exp(-pow(x[0],2)/pow(par[0],2));
    }

double scalar_expr(double *x, double *par){
    double A = par[0];
    double U;
    if (fabs(x[0])>10*pow(10,-10)){
        U=0;
    }
    else 
        U = -0.5;
    TF1 Psi("psi", psi,-10.*A, 10.*A,1);
    Psi.SetParameter(0,A);
    Psi.SetNormalized(1);
    double result = Psi.Eval(x[0])*(-TMath::Hbar()*TMath::Hbar()*TMath::C()/(1.6*1.6 * pow(10,-32) *2*0.511)*Psi.Derivative2(x[0])+U*Psi.Eval(x[0]));
    return result;
}

double scal_prod(double *x, double *par){
    TF1 scalar_exp("sc", scalar_expr,-10.*x[0],10.*x[0],1);
    scalar_exp.SetParameter(0,x[0]);
    return scalar_exp.Integral(-10.*x[0],10.*x[0]);
}

void task3(){
    ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator("GAUSS");
    double amin = 1e-14;
    double amax = 1e-13;
    TCanvas *s = new TCanvas();
    TF1 *scalar_pr = new TF1("sp", scal_prod,amin,amax,0);
    // scalar_pr->SetNpx(1000);
    scalar_pr -> Draw();
    double min = scalar_pr -> GetMinimumX(amin,amax);
    cout << min;

    // TF1 *wave_func = new TF1("wave_func", psi,-0.000000003,0.000000003,1);
    // wave_func -> SetParameter(0,min);
    // wave_func -> SetNormalized(1);
    // wave_func -> Draw();
    // wave_func->SetTitle("Wave function for particle in a box");
    // wave_func->GetXaxis()->SetTitle("x");
    // wave_func->GetYaxis()->SetTitle("#psi(x)");
    // s->SaveAs("wave_func.pdf"); 
}
